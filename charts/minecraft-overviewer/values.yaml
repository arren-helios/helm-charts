# Default values for minecraft.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

schedule:
  render: "*/15 * * * *"
  genpoi: "*/5 * * * *"

config:
  worldName: World
  defaultZoom: 5
  processes: 2

  inlineConfig: |
    global escape
    from html import escape

    def playerIcons(poi):
        if poi['id'] == 'Player':
            poi['icon'] = "https://overviewer.org/avatar/%s/head" % poi['EntityId']
            return "Last known location for %s" % poi['EntityId']

    def signFilter(poi):
        if poi['id'] == 'Sign' or poi['id'] == 'minecraft:sign':
            return escape("\n".join([poi['Text1'], poi['Text2'], poi['Text3'], poi['Text4']]))

    def townFilter(poi):
        if poi['id'] == 'Town':
            try:
                return (poi['name'], poi['description'])
            except KeyError:
                return poi['name'] + '\n'
  markers:
    players: dict(name="Players", filterFunction=playerIcons, checked=True, createInfoWindow=False)
    towns: dict(name="Signs", filterFunction=signFilter)
    signs: dict(name="Towns", filterFunction=townFilter, icon="markers/marker_town.png")

  renders:
    - name: day
      renderMode: smooth_lighting
      markers: &allMarkers [players, signs, towns]
    - name: night
      renderMode: smooth_night
      markers: *allMarkers
    - name: cave
      renderMode: cave
      markers: [players, signs]
    - name: nether
      dimension: nether
      renderMode: nether_smooth_lighting
      markers: *allMarkers
    - name: end
      dimension: end
      renderMode: end_smooth_lighting
      markers: *allMarkers

worldVolume: {}
  # persistentVolumeClaim:
  #   claimName: world

persistence:
  enabled: false
  volumeName: ""
  accessModes: [ReadWriteOnce]
  size: 10Gi
  storageClass: ""

image:
  repository: docker.helios.a/minecraft-overviewer
  pullPolicy: IfNotPresent
  tag: ""

resources: {}
  # limits:
  #   cpu: 2
  #   memory: 1524Mi
  # requests:
  #   cpu: 1
  #   memory: 1Gi

nginx:
  ingress:
    enabled: false
    hosts: []
    tls:
      enabled: false
      secretName: ""
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

  image:
    repository: docker.helios.a/nginx
    pullPolicy: IfNotPresent
    tag: 1.21-alpine

  service:
    type: ClusterIP
    port: 80
    loadBalancerIP: ""

  resources: {}
    # limits:
    #   cpu: 128m
    #   memory: 256Mi
    # requests:
    #   cpu: 128m
    #   memory: 256Mi
